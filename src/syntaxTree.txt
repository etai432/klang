statements are the building blocks of a program. example for a statement is If statement
program => declaration* EOF ;
declaration => varDecl | fnDecl | statement ;
fnDecl => fn type? identifier "(" (identifier":" type ("," identifier":" type)*)? ")" block ;
varDecl => let Identifier ":" type ("=" expression)? ";" ;
statement => exprStmt | printStmt | block | ifStmt | whileStmt | forStmt | returnStmt ;
returnStmt => "return" expression ";" ;
forStmt => "for" identifier "in" Iterable block ;
whileStmt => "while" "(" expression ")" block ;
ifStmt => "if" "(" expression ")" block ("else" block)? ;
block => "{" declaration "}" ;
printStmt => "print" "(" " string " ")" ;
exprStmt => expression ";" ;

expressions are the simplest blocks of codes, those are the lines you see that end with ;
expression => assignment;
assignment => IDENTIFIER "=" assignment | logical ;
logical => equality ( ("&&" | "||") equality )? ;
equality => comparison ( ( "!=" | "==" ) comparison )? ;
comparison => term ( ( ">" | ">=" | "<" | "<=" ) term )? ;
term => factor ( ( "-" | "+" ) term )? ;
factor => range ( ( "/" | "*" ) factor )? ;
range => unary(".."unary(".."unary)?)?;
unary => ( "!" | "-" ) primary | call ;
call => primary "(" expression? ( "," expression )* ")" ; // call may handle structs (struct.field) in the future
primary => Value | "(" logical ")" | identifier ;

type => INT | FLOAT | BOOL | STRING => (token)
Iterable => Int..Int | Int..Int..Int | iterable type (yet to be made)